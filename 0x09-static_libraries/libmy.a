!<arch>
0-isupper.o/    0           0     0     644     249       `
#include "main.h"
/**
 * _isupper - tells if file is uppercase
 * @c: the variable that prints if uppercase
 * Return: 1 if uppercase, 0 otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.o/     0           0     0     644     259       `
#include "main.h"
/**
 * _memset - primary function
 * @s: first variable
 * @b: second variable
 * @n: third variable
 * Return: void
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}

0-strcat.o/     0           0     0     644     472       `
#include "holberton.h"

/**
 * *_strcat - main function
 * @dest: variable
 * @src: variable
 * Return: 0
 */

char *_strcat(char *dest, char *src)
{
	int i;
	int destlen;

	/* Gets the length of dest */
	for (destlen = 0;  dest[destlen] != '\0'; destlen++)
	{}
	/* sets all of src at the end of dest */
	for (i = 0 ; src[i] != '\0'; i++)
	{
		dest[destlen + i] = src[i];
	}
		dest[destlen + i] = '\0';
	/* Set the null character at the end of dest */

	return (dest);

}
1-isdigit.o/    0           0     0     644     249       `
#include "main.h"
/**
 * _isdigit - checks to see if file is digit
 * @c: variable that propagates if digit or not
 * Return: 1 if digit, 0 if not
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.o/     0           0     0     644     281       `
#include "main.h"
/**
 * _memcpy - main function
 * @dest: first variable
 * @src: second variable
 * @n: third variable
 * Return: 0
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.o/    0           0     0     644     456       `
#include "main.h"

/**
 * *_strncat - main function
 * @dest: variable
 * @src: variable
 * @n: variable
 * Return: 0
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int destlen;
	/* measures the length of dest*/
	for (destlen = 0; dest[destlen] != '\0'; destlen++)
	{}

	/* measures the length from src*/
	for (i = 0; i < n; i++)
	{
		dest[destlen + i] = src[i];
		if (src[i] == '\0')
			break;
	}
	dest[destlen + i] = '\0';
	return (dest);
}
100-atoi.o/     0           0     0     644     42        `
#include "main.h"

int _atoi(char *s)
{
}
2-strchr.o/     0           0     0     644     216       `
#include "main.h"
/**
 * _strchr - main function
 * @s: first variable
 * @c: second variable
 * Return: 0
 */

char *_strchr(char *s, char c)
{
	do {
		if (*s == c)
			return (s);
	} while (*s++);
	return (NULL);
}
2-strncpy.o/    0           0     0     644     369       `
#include "main.h"

/**
 * *_strncpy - main function
 * @dest: variable
 * @src: variable
 * @n: variable
 * Return: 0
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	/* measures the length from src*/
	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
		if (src[i] == '\0')
		{
			while (i < n)
			{
				dest[i] = '\0';
				i++;
			}
		}
	}
	return (dest);
}

3-islower.o/    0           0     0     644     220       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 * @c: used to check if lower
 * Return: 0, closes
 */
int _islower(int c)
{

	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.o/       0           0     0     644     174       `
#include "main.h"
/**
 *  _puts - main function
 * @str: variable string
 * Return: 0
 */

void _puts(char *str)
{
	while (*str)
	{
		_putchar(*str++);
	}
	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     282       `
#include "main.h"
/**
 * _strcmp - main function
 * @s1: first variable
 * @s2: second variable
 * Return: 0
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' && s2[i] != '0'; i++)
	{
		if (*s1 - *s2 == 0)
		{
			s1++;
			s2++;
		}
	}
	return (*s1 - *s2);
}
3-strspn.o/     0           0     0     644     378       `
#include "main.h"
/**
 * _strspn - main function
 * @s: first variable
 * @accept: second variable
 * Return: 0
 */

unsigned int _strspn(char *s, char *accept)
{
	int x;
	int y;

	for (x = 0; s[x] != '\0'; x++)
	{
		for (y = 0; accept[x] != '\n'; y++)
		{
			if (accept[y] == s[x])
			{
				break;
			}
			if (accept[y] == '\0')
			{
				return (x);
			}
		}
	}
	return (0);
}
4-isalpha.o/    0           0     0     644     272       `
#include "main.h"
/**
 * _isalpha - searches if character is alphanumeric
 * @c: reference character
 *
 *
 * Return:0
 */
int _isalpha(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.o/    0           0     0     644     369       `
#include "main.h"
/**
 * _strpbrk - main function
 * @s: first variable
 * @accept: second variable
 *
 * Return: 0
 */

char *_strpbrk(char *s, char *accept)
{
	int byte;
	int string;

	for (byte = 0; *s != '\0'; byte++)
	{
		for (string = 0; accept[string] != '\0'; string++)
		{
			if (*s == accept[string])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}

5-strstr.o/     0           0     0     644     435       `
#include "main.h"
/**
 *  _strstr - main function
 * @haystack: string searched for
 * @needle: substring searched for
 * Return: pointer, or NULL
 */

char *_strstr(char *haystack, char *needle)
{
	int a;
	int b;

	for (a = 0; haystack[a] != '\0'; a++)
	{
		for (b = 0; needle[b] != '\0'; b++)
		{
			if (haystack[a + b] != needle[b])
			{
				break;
			}
		}
		if (!needle[b])
		{
			return (&haystack[a]);
		}

	}
	return (NULL);
}

6-abs.o/        0           0     0     644     203       `
#include "main.h"
/**
 * _abs - main function
 *@i: main code integer
 * Return: 0 and closes
 */
int _abs(int i)
{

	if (i >= 0)
	{
		return (i);
	}
	else if (i < 0)
	{
		return (-i);
	}
	return (0);
}

9-strcpy.o/     0           0     0     644     269       `
#include "main.h"
/**
 * _strcpy - main function
 * @src: source variable
 * @dest: destination variable
 * Return: 0
 */

char *_strcpy(char *dest, char *src)
{
	size_t i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.o/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
		return (write(1, &c, 1));
}
